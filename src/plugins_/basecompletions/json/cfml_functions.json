{
    "abs": ["(${1:number})", "(${1:numeric number})"],
    "acos": ["(${1:number})", "(${1:numeric number})"],
    "addSOAPRequestHeader": ["(${1:webservice}, ${2:namespace}, ${3:name}, ${4:value})", "(${1:string webservice}, ${2:string namespace}, ${3:string name}, ${4:string value}${5:, ${6:boolean mustUnderstand}})"],
    "addSOAPResponseHeader": ["(${1:namespace}, ${2:name}, ${3:value})", "(${1:string namespace}, ${2:string name}, ${3:string value}${4:, ${5:boolean mustUnderstand}})"],
    "ajaxLink": ["(${1:url})", "(${1:string url})"],
    "ajaxOnLoad": ["(${1:functionName})", "(${1:string functionName})"],
    "applicationStartTime": ["()", "()"],
    "applicationStop": ["()", "()"],
    "array": ["(${1:values})", "(${1:any values})"],
    "arrayAppend": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:boolean merge}})"],
    "arrayAvg": ["(${1:array})", "(${1:array array})"],
    "arrayClear": ["(${1:array})", "(${1:array array})"],
    "arrayContains": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:any substringMatch}})"],
    "arrayContainsNoCase": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"],
    "arrayDelete": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value}${3:, ${4:string scope}})"],
    "arrayDeleteAt": ["(${1:array}, ${2:index})", "(${1:array array}, ${2:numeric index})"],
    "arrayDeleteNoCase": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"],
    "arrayEach": ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:function callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "arrayEvery": ["(${1:array}, ${2:closure})", "(${1:array array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:boolean maxThreads}})"],
    "arrayFilter": ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:function callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "arrayFind": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"],
    "arrayFindAll": ["(${1:array})", "(${1:array array}${2:, ${3:any value or callback}})"],
    "arrayFindAllNoCase": ["(${1:array}, ${2:value or callback})", "(${1:array array}, ${2:variablename value or callback})"],
    "arrayFindNoCase": ["(${1:array}, ${2:value or callback})", "(${1:array array}, ${2:any value or callback})"],
    "arrayFirst": ["(${1:array})", "(${1:array array})"],
    "arrayIndexExists": ["(${1:array}, ${2:index})", "(${1:array array}, ${2:numeric index})"],
    "arrayInsertAt": ["(${1:array}, ${2:position}, ${3:value})", "(${1:array array}, ${2:numeric position}, ${3:any value})"],
    "arrayIsDefined": ["(${1:array}, ${2:index})", "(${1:string array}, ${2:numeric index})"],
    "arrayIsEmpty": ["(${1:array})", "(${1:array array})"],
    "arrayLast": ["(${1:array})", "(${1:array array})"],
    "arrayLen": ["(${1:array})", "(${1:array array})"],
    "arrayMap": ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:function callback}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "arrayMax": ["(${1:array})", "(${1:array array})"],
    "arrayMedian": ["(${1:array})", "(${1:array array})"],
    "arrayMerge": ["(${1:array1}, ${2:array2})", "(${1:array array1}, ${2:array array2}${3:, ${4:boolean leaveIndex}})"],
    "arrayMid": ["(${1:array}, ${2:start})", "(${1:array array}, ${2:numeric start}${3:, ${4:numeric count}})"],
    "arrayMin": ["(${1:array})", "(${1:array array})"],
    "arrayNew": ["(${1:dimension})", "(${1:numeric dimension}${2:, ${3:boolean isSynchronized}})"],
    "arrayPrepend": ["(${1:array}, ${2:value})", "(${1:array array}, ${2:any value})"],
    "arrayReduce": ["(${1:array}, ${2:callback})", "(${1:array array}, ${2:function callback}${3:, ${4:any initialValue}})"],
    "arrayResize": ["(${1:array}, ${2:size})", "(${1:array array}, ${2:numeric size})"],
    "arrayReverse": ["(${1:array})", "(${1:array array})"],
    "arraySet": ["(${1:array}, ${2:start}, ${3:end}, ${4:value})", "(${1:array array}, ${2:numeric start}, ${3:numeric end}, ${4:any value})"],
    "arraySlice": ["(${1:array}, ${2:offset})", "(${1:array array}, ${2:numeric offset}${3:, ${4:numeric length}})"],
    "arraySome": ["(${1:array}, ${2:closure})", "(${1:array array}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "arraySort": ["(${1:array}, ${2:sortType})", "(${1:array array}, ${2:string sortType}${3:, ${4:string sortOrder}}${5:, ${6:any callback}})"],
    "arraySum": ["(${1:array})", "(${1:array array}${2:, ${3:boolean ignoreEmpty}})"],
    "arraySwap": ["(${1:array}, ${2:position1}, ${3:position2})", "(${1:array array}, ${2:numeric position1}, ${3:numeric position2})"],
    "arrayToList": ["(${1:array})", "(${1:array array}${2:, ${3:string delimiter}})"],
    "arrayToStruct": ["(${1:array})", "(${1:array array})"],
    "asc": ["(${1:string})", "(${1:string string})"],
    "asin": ["(${1:number})", "(${1:numeric number})"],
    "atn": ["(${1:number})", "(${1:numeric number})"],
    "beat": ["(${1:time})", "(${1:any time})"],
    "binaryDecode": ["(${1:string}, ${2:encoding})", "(${1:string string}, ${2:string encoding})"],
    "binaryEncode": ["(${1:binaryData}, ${2:encoding})", "(${1:binary binaryData}, ${2:string encoding})"],
    "bitAnd": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"],
    "bitMaskClear": ["(${1:number}, ${2:start}, ${3:length})", "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})"],
    "bitMaskRead": ["(${1:number}, ${2:start}, ${3:length})", "(${1:numeric number}, ${2:numeric start}, ${3:numeric length})"],
    "bitMaskSet": ["(${1:number}, ${2:mask}, ${3:start}, ${4:length})", "(${1:numeric number}, ${2:numeric mask}, ${3:numeric start}, ${4:numeric length})"],
    "bitNot": ["(${1:number})", "(${1:numeric number})"],
    "bitOr": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"],
    "bitShln": ["(${1:number}, ${2:count})", "(${1:numeric number}, ${2:numeric count})"],
    "bitShrn": ["(${1:number}, ${2:count})", "(${1:numeric number}, ${2:numeric count})"],
    "bitXor": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"],
    "booleanFormat": ["(${1:value})", "(${1:numeric value})"],
    "bundleInfo": ["(${1:obj})", "(${1:any obj})"],
    "cacheClear": ["(${1:filterOrTags})", "(${1:any filterOrTags}${2:, ${3:string cacheName}})"],
    "cacheCount": ["(${1:cacheName})", "(${1:string cacheName})"],
    "cacheDelete": ["(${1:id})", "(${1:string id}${2:, ${3:boolean throwOnError}}${4:, ${5:string cacheName}})"],
    "cacheGet": ["(${1:id})", "(${1:string id}${2:, ${3:string region}}${4:, ${5:string cacheName}}${6:, ${7:boolean throwWhenNotExist}})"],
    "cacheGetAll": ["(${1:filter})", "(${1:string filter}${2:, ${3:string cacheName}})"],
    "cacheGetAllIds": ["()", "()"],
    "cacheGetDefaultCacheName": ["(${1:type})", "(${1:string type})"],
    "cacheGetEngineProperties": ["()", "()"],
    "cacheGetMetadata": ["(${1:id})", "(${1:string id}${2:, ${3:string template}}${4:, ${5:string region}})"],
    "cacheGetProperties": ["(${1:type})", "(${1:string type})"],
    "cacheGetSession": ["(${1:objectType})", "(${1: objectType}${2:, ${3:boolean isKey}})"],
    "cacheIdExists": ["(${1:id})", "(${1: id}${2:, ${3: region}})"],
    "cacheKeyExists": ["(${1:key})", "(${1:string key}${2:, ${3:string cacheName}})"],
    "cachePut": ["(${1:id}, ${2:value})", "(${1:string id}, ${2:string value}${3:, ${4:date timespan}}${5:, ${6:date idleTime}}${7:, ${8:string region}}${9:, ${10:string cacheName}})"],
    "cacheRegionExists": ["(${1:region})", "(${1: region})"],
    "cacheRegionNew": ["(${1:region})", "(${1: region}${2:, ${3: properties}}${4:, ${5: throwOnError}})"],
    "cacheRegionRemove": ["(${1:region})", "(${1: region})"],
    "cacheRemove": ["(${1:ids})", "(${1:string ids}${2:, ${3:boolean throwOnError}}${4:, ${5:string key}}${6:, ${7:boolean exact}})"],
    "cacheRemoveAll": ["(${1:region})", "(${1: region})"],
    "cacheSetProperties": ["(${1:properties})", "(${1:structure properties})"],
    "callStackDump": ["(${1:destination})", "(${1:string destination})"],
    "callStackGet": ["()", "()"],
    "canonicalize": ["(${1:input}, ${2:restrictMultiple}, ${3:restrictMixed})", "(${1:string input}, ${2:boolean restrictMultiple}, ${3:boolean restrictMixed}${4:, ${5:boolean throwOnError}})"],
    "ceiling": ["(${1:number})", "(${1:numeric number})"],
    "cfusion_Decrypt": ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key})"],
    "cfusion_Encrypt": ["(${1:string}, ${2:key})", "(${1:string string}, ${2:string key})"],
    "charsetDecode": ["(${1:String}, ${2:encoding})", "(${1:string String}, ${2:string encoding})"],
    "charsetEncode": ["(${1:binaryobject}, ${2:encoding})", "(${1:binary binaryobject}, ${2:string encoding})"],
    "chr": ["(${1:number})", "(${1:numeric number})"],
    "cjustify": ["(${1:String}, ${2:length})", "(${1:string String}, ${2:numeric length})"],
    "collectionEach": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure})"],
    "collectionEvery": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "collectionFilter": ["(${1:collection}, ${2:filter})", "(${1:any collection}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "collectionMap": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "collectionReduce": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:any initalValue}})"],
    "collectionSome": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "compare": ["(${1:string1}, ${2:string2})", "(${1:string string1}, ${2:string string2})"],
    "compareNoCase": ["(${1:string1}, ${2:string2})", "(${1:string string1}, ${2:string string2})"],
    "componentCacheClear": ["()", "()"],
    "componentCacheList": ["()", "()"],
    "componentInfo": ["(${1:component})", "(${1:component component})"],
    "compress": ["(${1:format}, ${2:source}, ${3:target})", "(${1:string format}, ${2:string source}, ${3:string target}${4:, ${5:boolean includeBaseFolder}}${6:, ${7:string mode}})"],
    "contractPath": ["(${1:path_absolute})", "(${1:string path_absolute}${2:, ${3:boolean placeholder}})"],
    "cos": ["(${1:number})", "(${1:numeric number})"],
    "createDate": ["(${1:year}, ${2:month}, ${3:day})", "(${1:numeric year}, ${2:numeric month}, ${3:numeric day})"],
    "createDateTime": ["(${1:year}, ${2:month}, ${3:day}, ${4:hour}, ${5:minute}, ${6:second})", "(${1:numeric year}, ${2:numeric month}, ${3:numeric day}, ${4:numeric hour}, ${5:numeric minute}, ${6:numeric second})"],
    "createDynamicProxy": ["(${1:fullyQualifiedNameOfCFC})", "(${1: fullyQualifiedNameOfCFC}${2:, ${3: interfaceName}})"],
    "createGUID": ["()", "()"],
    "createObject": ["(${1:type}, ${2:context}, ${3:class}, ${4:locale}, ${5:servername}, ${6:component_name}, ${7:urltowsdl})", "(${1:string type}, ${2:string context}, ${3:string class}, ${4:string locale}, ${5:string servername}, ${6:string component_name}, ${7:string urltowsdl}${8:, ${9:string portname}}${10:, ${11:string OSGibundle}}${12:, ${13:string OSGiversion}})"],
    "createODBCDate": ["(${1:date})", "(${1:date date})"],
    "createODBCDateTime": ["(${1:date})", "(${1:any date})"],
    "createODBCTime": ["(${1:date})", "(${1:date date})"],
    "createTime": ["(${1:hour}, ${2:minute}, ${3:second})", "(${1:numeric hour}, ${2:numeric minute}, ${3:numeric second})"],
    "createTimespan": ["(${1:days}, ${2:hours}, ${3:minutes}, ${4:seconds})", "(${1:numeric days}, ${2:numeric hours}, ${3:numeric minutes}, ${4:numeric seconds})"],
    "createUniqueID": ["()", "()"],
    "createUUID": ["()", "()"],
    "csrfGenerateToken": ["(${1:key})", "(${1:string key}${2:, ${3:boolean forceNew}})"],
    "csrfVerifyToken": ["(${1:token})", "(${1:string token}${2:, ${3:string key}})"],
    "ctCacheClear": ["()", "()"],
    "ctCacheList": ["()", "()"],
    "datasourceFlushMetacache": ["(${1:datasourceName})", "(${1:string datasourceName})"],
    "dateAdd": ["(${1:datepart}, ${2:number}, ${3:date})", "(${1:string datepart}, ${2:numeric number}, ${3:date date})"],
    "dateCompare": ["(${1:date1}, ${2:date2})", "(${1:date date1}, ${2:date date2}${3:, ${4:string datePart}})"],
    "dateConvert": ["(${1:type}, ${2:date})", "(${1:string type}, ${2:date date})"],
    "dateDiff": ["(${1:datepart}, ${2:date1}, ${3:date2})", "(${1:string datepart}, ${2:date date1}, ${3:date date2})"],
    "dateFormat": ["(${1:date})", "(${1:date date}${2:, ${3:string mask}})"],
    "datePart": ["(${1:datepart}, ${2:date})", "(${1:string datepart}, ${2:date date})"],
    "dateTimeFormat": ["(${1:dateTime})", "(${1:date dateTime}${2:, ${3:string mask}}${4:, ${5:string timezone}})"],
    "day": ["(${1:date})", "(${1:date date})"],
    "dayOfWeek": ["(${1:date})", "(${1:date date})"],
    "dayOfWeekAsString": ["(${1:day_of_week})", "(${1:numeric day_of_week})"],
    "dayOfWeekShortAsString": ["(${1:day_of_week})", "(${1:numeric day_of_week}${2:, ${3:string locale}})"],
    "dayOfYear": ["(${1:date})", "(${1:date date})"],
    "daysInMonth": ["(${1:date})", "(${1:date date})"],
    "daysInYear": ["(${1:date})", "(${1:date date})"],
    "de": ["(${1:String})", "(${1:string String})"],
    "decimalFormat": ["(${1:number})", "(${1:numeric number})"],
    "decodeForHTML": ["(${1:inputString})", "(${1: inputString})"],
    "decodeFromURL": ["(${1:inputString})", "(${1: inputString})"],
    "decrementValue": ["(${1:number})", "(${1:numeric number})"],
    "decrypt": ["(${1:encrypted_string}, ${2:key})", "(${1:string encrypted_string}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary ivorsalt}}${9:, ${10:numeric iterations}})"],
    "decryptBinary": ["(${1:bytes}, ${2:key})", "(${1:string bytes}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:binary ivorsalt}}${7:, ${8:numeric iterations}})"],
    "deleteClientVariable": ["(${1:name})", "(${1:string name})"],
    "deserialize": ["(${1:StringToBeDeserialized}, ${2:type}, ${3:useCustomSerializer})", "(${1:string StringToBeDeserialized}, ${2:string type}, ${3:boolean useCustomSerializer})"],
    "deserializeJSON": ["(${1:jsonvar})", "(${1:string jsonvar}${2:, ${3:boolean strictMapping}}${4:, ${5:boolean useCustomSerializer}})"],
    "deserializeXML": ["(${1:StringToBeDeserialized}, ${2:useCustomSerializer})", "(${1: StringToBeDeserialized}, ${2: useCustomSerializer})"],
    "directoryCopy": ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination}${3:, ${4:boolean recurse}}${5:, ${6:any filter}}${7:, ${8:boolean createPath}})"],
    "directoryCreate": ["(${1:path})", "(${1:string path})"],
    "directoryDelete": ["(${1:path}, ${2:recurse})", "(${1:string path}, ${2:boolean recurse})"],
    "directoryExists": ["(${1:absolute_path})", "(${1:string absolute_path})"],
    "directoryList": ["(${1:path})", "(${1:string path}${2:, ${3:boolean recurse}}${4:, ${5:string listInfo}}${6:, ${7:string filter}}${8:, ${9:string sort}}${10:, ${11:string type}})"],
    "directoryRename": ["(${1:path}, ${2:newPath})", "(${1:string path}, ${2:string newPath})"],
    "dollarFormat": ["(${1:number})", "(${1:numeric number})"],
    "dotnetToCFType": ["(${1:variable_name})", "(${1:varible variable_name})"],
    "duplicate": ["(${1:variable})", "(${1:any variable})"],
    "each": ["(${1:collection}, ${2:closure})", "(${1:any collection}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "echo": ["(${1:string})", "(${1:string string})"],
    "empty": ["(${1:variable})", "(${1:any variable})"],
    "encodeForCSS": ["(${1:inputString})", "(${1: inputString}${2:, ${3: canonicalize}})"],
    "encodeForDN": ["(${1:string})", "(${1:string string})"],
    "encodeForHTML": ["(${1:inputString})", "(${1:string inputString}${2:, ${3:boolean canonicalize}})"],
    "encodeForHTMLAttribute": ["(${1:inputString})", "(${1:string inputString}${2:, ${3:boolean canonicalize}})"],
    "encodeForJavaScript": ["(${1:inputString})", "(${1:string inputString}${2:, ${3:boolean canonicalize}})"],
    "encodeForLDAP": ["(${1:string})", "(${1: string})"],
    "encodeForURL": ["(${1:inputString})", "(${1: inputString}${2:, ${3: canonicalize}})"],
    "encodeForXML": ["(${1:inputString})", "(${1: inputString}${2:, ${3:boolean canonicalize}})"],
    "encodeForXMLAttribute": ["(${1:inputString})", "(${1: inputString}${2:, ${3:boolean canonicalize}})"],
    "encodeForXPath": ["(${1:inputString})", "(${1:string inputString}${2:, ${3:boolean canonicalize}})"],
    "encrypt": ["(${1:String}, ${2:key})", "(${1:string String}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}}${7:, ${8:binary ivorsalt}}${9:, ${10:numeric iterations}})"],
    "encryptBinary": ["(${1:bytes}, ${2:key})", "(${1:string bytes}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:binary ivorsalt}}${7:, ${8:numeric iterations}})"],
    "entityDelete": ["(${1:entity})", "(${1:variablename entity})"],
    "entityLoad": ["(${1:entityName})", "(${1:string entityName}${2:, ${3:any filterCriteria}}${4:, ${5:boolean unique}}${6:, ${7:string sortOrder}}${8:, ${9:struct options}})"],
    "entityLoadByExample": ["(${1:sampleEntity})", "(${1:string sampleEntity}${2:, ${3:boolean unique}})"],
    "entityLoadByPK": ["(${1:entityName}, ${2:id})", "(${1:string entityName}, ${2:string id}${3:, ${4:boolean unique}})"],
    "entityMerge": ["(${1:entity})", "(${1:variablename entity})"],
    "entityNameArray": ["()", "()"],
    "entityNameList": ["(${1:delimiter})", "(${1:string delimiter})"],
    "entityNew": ["(${1:entityName})", "(${1:string entityName})"],
    "entityReload": ["(${1:entity})", "(${1:variablename entity})"],
    "entitySave": ["(${1:entity})", "(${1:variablename entity}${2:, ${3:boolean forceInsert}})"],
    "entityToQuery": ["(${1:orm_object})", "(${1:variablename orm_object}${2:, ${3:string entity_name}})"],
    "esapiDecode": ["(${1:decodeFrom}, ${2:string})", "(${1:string decodeFrom}, ${2:string string})"],
    "esapiEncode": ["(${1:encodeFor}, ${2:string})", "(${1:string encodeFor}, ${2:string string})"],
    "evaluate": ["(${1:expression1})", "(${1:string expression1}${2:, ${3:string expression2}}${4:, ${5:string expressionN}})"],
    "exp": ["(${1:number})", "(${1:numeric number})"],
    "expandPath": ["(${1:relative_path})", "(${1:string relative_path})"],
    "extract": ["(${1:format}, ${2:source}, ${3:target})", "(${1:string format}, ${2:string source}, ${3:string target})"],
    "fileAppend": ["(${1:filePath}, ${2:data})", "(${1:string filePath}, ${2:string data}${3:, ${4:string charset}})"],
    "fileClose": ["(${1:fileObj})", "(${1:any fileObj})"],
    "fileCopy": ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination})"],
    "fileDelete": ["(${1:filepath})", "(${1: filepath})"],
    "fileExists": ["(${1:path})", "(${1:string path})"],
    "fileGetMimeType": ["(${1:path}, ${2:fileObject}, ${3:strict})", "(${1: path}, ${2: fileObject}, ${3: strict})"],
    "fileIsEOF": ["(${1:fileObject})", "(${1:any fileObject})"],
    "fileMove": ["(${1:source}, ${2:destination})", "(${1:string source}, ${2:string destination})"],
    "fileOpen": ["(${1:filePath})", "(${1: filePath}${2:, ${3: mode}}${4:, ${5: charset}})"],
    "fileRead": ["(${1:filepath})", "(${1:string filepath}${2:, ${3:string charset}})"],
    "fileReadBinary": ["(${1:filePath})", "(${1:string filePath})"],
    "fileReadLine": ["(${1:fileObj})", "(${1: fileObj})"],
    "fileSeek": ["(${1:file}, ${2:position})", "(${1:variablename file}, ${2:numeric position})"],
    "fileSetAccessMode": ["(${1:filePath}, ${2:mode})", "(${1:string filePath}, ${2:string mode})"],
    "fileSetAttribute": ["(${1:filePath}, ${2:attribute})", "(${1:string filePath}, ${2:string attribute})"],
    "fileSetLastModified": ["(${1:filePath}, ${2:date})", "(${1:string filePath}, ${2:date date})"],
    "fileSkipBytes": ["(${1:file}, ${2:bytes})", "(${1:variablename file}, ${2:numeric bytes})"],
    "fileUpload": ["(${1:destination})", "(${1:string destination}${2:, ${3:string fileField}}${4:, ${5:string nameConflict}}${6:, ${7:string accept}}${8:, ${9:boolean strict}})"],
    "fileUploadAll": ["(${1:destination})", "(${1:string destination}${2:, ${3:string accept}}${4:, ${5:string nameConflict}})"],
    "fileWrite": ["(${1:file}, ${2:data})", "(${1:any file}, ${2:string data}${3:, ${4:string charset}})"],
    "fileWriteLine": ["(${1:fileobj}, ${2:content})", "(${1:any fileobj}, ${2:string content})"],
    "find": ["(${1:substring}, ${2:String})", "(${1:string substring}, ${2:string String}${3:, ${4:numeric start}})"],
    "findNoCase": ["(${1:substring}, ${2:String})", "(${1:string substring}, ${2:string String}${3:, ${4:numeric start}})"],
    "findOneOf": ["(${1:set}, ${2:string})", "(${1:string set}, ${2:string string}${3:, ${4:numeric start}})"],
    "firstDayOfMonth": ["(${1:date})", "(${1:date date})"],
    "fix": ["(${1:number})", "(${1:numeric number})"],
    "floor": ["(${1:number})", "(${1:numeric number})"],
    "formatBaseN": ["(${1:number}, ${2:radix})", "(${1:numeric number}, ${2:numeric radix})"],
    "generatePBKDFKey": ["(${1:algorithm}, ${2:passphrase}, ${3:salt}, ${4:iterations}, ${5:keySize})", "(${1:string algorithm}, ${2:string passphrase}, ${3:string salt}, ${4:numeric iterations}, ${5:numeric keySize})"],
    "generateSecretKey": ["(${1:algorithm})", "(${1:string algorithm}${2:, ${3:numeric keysize}})"],
    "getApplicationMetadata": ["()", "()"],
    "getApplicationSettings": ["(${1:suppressFunction})", "(${1:boolean suppressFunction})"],
    "getAuthUser": ["()", "()"],
    "getBaseTagData": ["(${1:tagname})", "(${1:string tagname}${2:, ${3:numeric instancenumber}})"],
    "getBaseTagList": ["(${1:delimiter})", "(${1:string delimiter})"],
    "getBaseTemplatePath": ["()", "()"],
    "getBuiltinFunction": ["(${1:name})", "(${1:string name})"],
    "getCanonicalPath": ["(${1:path})", "(${1:string path})"],
    "getClassPath": ["()", "()"],
    "getClientVariablesList": ["()", "()"],
    "getComponentMetadata": ["(${1:path})", "(${1:string path})"],
    "getContextRoot": ["()", "()"],
    "getCpuUsage": ["(${1:interval})", "(${1:numeric interval})"],
    "getCurrentContext": ["()", "()"],
    "getCurrentTemplatePath": ["()", "()"],
    "getDirectoryFromPath": ["(${1:path})", "(${1:string path})"],
    "getEncoding": ["(${1:scope_name})", "(${1:string scope_name})"],
    "getException": ["(${1:javaobject})", "(${1:any javaobject})"],
    "getFileFromPath": ["(${1:path})", "(${1:string path})"],
    "getFileInfo": ["(${1:path})", "(${1:string path})"],
    "getFreeSpace": ["(${1:path})", "(${1: path})"],
    "getFunctionCalledName": ["()", "()"],
    "getFunctionData": ["(${1:functionName})", "(${1:string functionName}${2:, ${3:string dialect}})"],
    "getFunctionKeywords": ["()", "()"],
    "getFunctionList": ["()", "()"],
    "getGatewayHelper": ["(${1:gatewayID})", "(${1:string gatewayID})"],
    "getHTTPRequestData": ["()", "()"],
    "getHTTPTimeString": ["(${1:DateTime})", "(${1:date DateTime})"],
    "getK2ServerDocCount": ["()", "()"],
    "getK2ServerDocCountLimit": ["()", "()"],
    "getLocale": ["()", "()"],
    "getLocaleCountry": ["()", "()"],
    "getLocaleDisplayName": ["()", "()"],
    "getLocaleInfo": ["(${1:locale})", "(${1:string locale}${2:, ${3:string dspLocale}})"],
    "getLocaleLanguage": ["()", "()"],
    "getLocalhostIP": ["()", "()"],
    "getLuceeID": ["()", "()"],
    "getMemoryUsage": ["(${1:type})", "(${1:string type})"],
    "getMetadata": ["(${1:Object})", "(${1:any Object})"],
    "getMetricData": ["(${1:mode})", "(${1:string mode})"],
    "getNumericDate": ["(${1:date})", "(${1:any date})"],
    "getPageContext": ["()", "()"],
    "getPrinterInfo": ["(${1:printer})", "(${1:string printer})"],
    "getPrinterList": ["(${1:delimiter})", "(${1:string delimiter})"],
    "getProfileSections": ["(${1:inifile})", "(${1:string inifile})"],
    "getProfileString": ["(${1:inipath}, ${2:section}, ${3:entry})", "(${1:string inipath}, ${2:string section}, ${3:string entry})"],
    "getReadableImageFormats": ["()", "()"],
    "getSafeHTML": ["(${1:inputString}, ${2:PolicyFile}, ${3:throwOnError})", "(${1:string inputString}, ${2:string PolicyFile}, ${3:boolean throwOnError})"],
    "getSOAPRequest": ["()", "()"],
    "getSOAPRequestHeader": ["(${1:namespace}, ${2:name})", "(${1:string namespace}, ${2:string name}${3:, ${4:boolean asXML}})"],
    "getSOAPResponse": ["(${1:webservice})", "(${1:string webservice})"],
    "getSOAPResponseHeader": ["(${1:webservice}, ${2:namespace}, ${3:name})", "(${1:any webservice}, ${2:string namespace}, ${3:string name}${4:, ${5:boolean asXML}})"],
    "getSystemFreeMemory": ["()", "()"],
    "getSystemTotalMemory": ["(${1:region})", "(${1: region})"],
    "getTagData": ["(${1:nameSpaceWithSeperator}, ${2:tagName})", "(${1:string nameSpaceWithSeperator}, ${2:string tagName}${3:, ${4:string dialect}})"],
    "getTagList": ["()", "()"],
    "getTempDirectory": ["()", "()"],
    "getTempFile": ["(${1:dir}, ${2:prefix})", "(${1:string dir}, ${2:string prefix})"],
    "getTemplatePath": ["()", "()"],
    "getTickCount": ["()", "()"],
    "getTimezone": ["()", "()"],
    "getTimezoneInfo": ["(${1:text})", "(${1:string text})"],
    "getToken": ["(${1:String}, ${2:index})", "(${1:string String}, ${2:numeric index}${3:, ${4:string delimiters}})"],
    "getTotalSpace": ["(${1:path})", "(${1: path})"],
    "getUserRoles": ["()", "()"],
    "getVariable": ["(${1:name})", "(${1:string name})"],
    "getVFSMetadata": ["(${1:fileSystemType})", "(${1:string fileSystemType})"],
    "getWriteableImageFormats": ["()", "()"],
    "hash": ["(${1:String})", "(${1:string String}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:numeric iterations}})"],
    "hash40": ["(${1:input})", "(${1:any input}${2:, ${3:string algorithm}}${4:, ${5:string encoding}}${6:, ${7:numeric numIterations}})"],
    "hmac": ["(${1:message}, ${2:key})", "(${1:string message}, ${2:string key}${3:, ${4:string algorithm}}${5:, ${6:string encoding}})"],
    "hour": ["(${1:date})", "(${1:date date})"],
    "htmlCodeFormat": ["(${1:String})", "(${1:string String}${2:, ${3:numeric version}})"],
    "htmlEditFormat": ["(${1:string})", "(${1:string string}${2:, ${3:numeric version}})"],
    "htmlParse": ["(${1:html})", "(${1:string html}${2:, ${3:boolean caseSensitive}})"],
    "iIf": ["(${1:condition}, ${2:expression1}, ${3:expression2})", "(${1:boolean condition}, ${2:string expression1}, ${3:string expression2})"],
    "imageAddBorder": ["(${1:name}, ${2:thickness})", "(${1:string name}, ${2:string thickness}${3:, ${4:string color}}${5:, ${6:string bordertype}})"],
    "imageBlur": ["(${1:name})", "(${1:string name}${2:, ${3:numeric blurradius}})"],
    "imageClearRect": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})"],
    "imageCopy": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:numeric dx}}${8:, ${9:numeric dy}})"],
    "imageCreateCaptcha": ["(${1:height}, ${2:width}, ${3:text})", "(${1: height}, ${2: width}, ${3: text}${4:, ${5: difficulty}}${6:, ${7: font}}${8:, ${9: fontsize}})"],
    "imageCrop": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height})"],
    "imageDrawArc": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:startAngle}, ${7:archAngle})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric startAngle}, ${7:numeric archAngle}${8:, ${9:boolean filled}})"],
    "imageDrawBeveledRect": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:raised})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:boolean raised}${7:, ${8:boolean filled}})"],
    "imageDrawCubicCurve": ["(${1:name}, ${2:ctrlx1}, ${3:ctrly1}, ${4:ctrlx2}, ${5:ctrly2}, ${6:x1}, ${7:y1}, ${8:x2}, ${9:y2})", "(${1: name}, ${2:string ctrlx1}, ${3:numeric ctrly1}, ${4:numeric ctrlx2}, ${5:numeric ctrly2}, ${6:numeric x1}, ${7:numeric y1}, ${8:numeric x2}, ${9:numeric y2})"],
    "imageDrawImage": ["(${1:name}, ${2:image}, ${3:x}, ${4:y})", "(${1:any name}, ${2:any image}, ${3:numeric x}, ${4:numeric y})"],
    "imageDrawLine": ["(${1:name}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})", "(${1:string name}, ${2:numeric x1}, ${3:numeric y1}, ${4:numeric x2}, ${5:numeric y2})"],
    "imageDrawLines": ["(${1:name}, ${2:xcords}, ${3:ycords})", "(${1:string name}, ${2:numeric xcords}, ${3:numeric ycords}${4:, ${5:boolean isPolygon}}${6:, ${7:boolean filled}})"],
    "imageDrawOval": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})"],
    "imageDrawPoint": ["(${1:name}, ${2:x}, ${3:y})", "(${1:string name}, ${2:numeric x}, ${3:numeric y})"],
    "imageDrawQuadraticCurve": ["(${1:name}, ${2:x1}, ${3:y1}, ${4:ctrlx1}, ${5:ctrly1}, ${6:x2}, ${7:y2})", "(${1: name}, ${2:numeric x1}, ${3:numeric y1}, ${4:string ctrlx1}, ${5:numeric ctrly1}, ${6:numeric x2}, ${7:numeric y2})"],
    "imageDrawRect": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}${6:, ${7:boolean filled}})"],
    "imageDrawRoundRect": ["(${1:name}, ${2:x}, ${3:y}, ${4:width}, ${5:height}, ${6:arcwidth}, ${7:archeight})", "(${1:string name}, ${2:numeric x}, ${3:numeric y}, ${4:numeric width}, ${5:numeric height}, ${6:numeric arcwidth}, ${7:numeric archeight}${8:, ${9:boolean filled}})"],
    "imageDrawText": ["(${1:name}, ${2:str}, ${3:x}, ${4:y})", "(${1:string name}, ${2:string str}, ${3:numeric x}, ${4:numeric y}${5:, ${6:struct attributecollection}})"],
    "imageFilter": ["(${1:name}, ${2:filtername})", "(${1:any name}, ${2:string filtername}${3:, ${4:struct parameters}})"],
    "imageFilterColorMap": ["(${1:type})", "(${1:string type}${2:, ${3:string lineColor1}}${4:, ${5:string lineColor2}})"],
    "imageFilterCurves": ["()", "()"],
    "imageFilterKernel": ["(${1:width}, ${2:height}, ${3:data})", "(${1:numeric width}, ${2:numeric height}, ${3:any data})"],
    "imageFilterWarpGrid": ["(${1:rows}, ${2:cols}, ${3:width}, ${4:height})", "(${1:numeric rows}, ${2:numeric cols}, ${3:numeric width}, ${4:numeric height})"],
    "imageFlip": ["(${1:name}, ${2:transpose})", "(${1:string name}, ${2:string transpose})"],
    "imageFonts": ["()", "()"],
    "imageFormats": ["()", "()"],
    "imageGetBlob": ["(${1:source})", "(${1:string source})"],
    "imageGetBufferedImage": ["(${1:name})", "(${1:string name})"],
    "imageGetExifMetaData": ["(${1:name})", "(${1:string name})"],
    "imageGetEXIFTag": ["(${1:name}, ${2:tagName})", "(${1:string name}, ${2:string tagName})"],
    "imageGetHeight": ["(${1:name})", "(${1:string name})"],
    "imageGetIPTCMetaData": ["(${1:name})", "(${1:string name})"],
    "imageGetIPTCtag": ["(${1:name}, ${2:tagName})", "(${1:string name}, ${2:string tagName})"],
    "imageGetMetadata": ["(${1:name})", "(${1:string name})"],
    "imageGetWidth": ["(${1:name})", "(${1:string name})"],
    "imageGrayScale": ["(${1:name})", "(${1:string name})"],
    "imageInfo": ["(${1:name})", "(${1:string name})"],
    "imageMakeColorTransparent": ["(${1:img}, ${2:color})", "(${1: img}, ${2: color})"],
    "imageMakeTranslucent": ["(${1:img}, ${2:percentage})", "(${1: img}, ${2: percentage})"],
    "imageNegative": ["(${1:name})", "(${1:string name})"],
    "imageNew": ["(${1:source})", "(${1:string source}${2:, ${3:numeric width}}${4:, ${5:numeric height}}${6:, ${7:string imagetype}}${8:, ${9:string canvascolor}})"],
    "imageOverlay": ["(${1:source1}, ${2:source2})", "(${1:string source1}, ${2:string source2}${3:, ${4:string rule}}${5:, ${6:string alpha}})"],
    "imagePaste": ["(${1:image1}, ${2:image2}, ${3:x}, ${4:y})", "(${1:string image1}, ${2:string image2}, ${3:numeric x}, ${4:numeric y})"],
    "imageRead": ["(${1:path})", "(${1:string path})"],
    "imageReadBase64": ["(${1:string})", "(${1:string string})"],
    "imageResize": ["(${1:name}, ${2:width}, ${3:height})", "(${1:string name}, ${2:numeric width}, ${3:numeric height}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})"],
    "imageRotate": ["(${1:name}, ${2:angle})", "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}}${7:, ${8:string interpolation}})"],
    "imageRotateDrawingAxis": ["(${1:name}, ${2:angle})", "(${1:string name}, ${2:numeric angle}${3:, ${4:numeric x}}${5:, ${6:numeric y}})"],
    "imageScaleTofit": ["(${1:name}, ${2:fitWidth}, ${3:fitHeight})", "(${1:string name}, ${2:numeric fitWidth}, ${3:numeric fitHeight}${4:, ${5:string interpolation}}${6:, ${7:boolean blurfactor}})"],
    "imageSetAntialiasing": ["(${1:name})", "(${1:string name}${2:, ${3:boolean antialias}})"],
    "imageSetBackgroundColor": ["(${1:name}, ${2:color})", "(${1: name}, ${2: color})"],
    "imageSetDrawingAlpha": ["(${1:name}, ${2:alpha})", "(${1:any name}, ${2:numeric alpha})"],
    "imageSetDrawingColor": ["(${1:name}, ${2:color})", "(${1:string name}, ${2: color})"],
    "imageSetDrawingStroke": ["(${1:name})", "(${1:string name}${2:, ${3:struct attributecollection}})"],
    "imageSetDrawingTransparency": ["(${1:name}, ${2:percent})", "(${1:stirng name}, ${2:numeric percent})"],
    "imageSharpen": ["(${1:name})", "(${1:string name}${2:, ${3:numeric gain}})"],
    "imageShear": ["(${1:name}, ${2:shear})", "(${1:string name}, ${2:numeric shear}${3:, ${4:string direction}}${5:, ${6:string interpolation}})"],
    "imageShearDrawingAxis": ["(${1:name}, ${2:shrx}, ${3:shry})", "(${1:string name}, ${2:numeric shrx}, ${3:numeric shry})"],
    "imageTranslate": ["(${1:name}, ${2:xTrans}, ${3:yTrans})", "(${1:string name}, ${2:numeric xTrans}, ${3:numeric yTrans}${4:, ${5:string interpolation}})"],
    "imageTranslateDrawingAxis": ["(${1:name}, ${2:x}, ${3:y})", "(${1: name}, ${2:numeric x}, ${3:numeric y})"],
    "imageWrite": ["(${1:name})", "(${1:string name}${2:, ${3:string destination}}${4:, ${5:string quality}}${6:, ${7:boolean overwrite}})"],
    "imageWriteBase64": ["(${1:name}, ${2:destination}, ${3:format})", "(${1:string name}, ${2:string destination}, ${3:string format}${4:, ${5:boolean inHTMLFormat}}${6:, ${7:boolean overwrite}})"],
    "imageXORDrawingMode": ["(${1:name}, ${2:c1})", "(${1:string name}, ${2:string c1})"],
    "incrementValue": ["(${1:number})", "(${1:numeric number})"],
    "inputBaseN": ["(${1:String}, ${2:radix})", "(${1:string String}, ${2:string radix})"],
    "insert": ["(${1:substring}, ${2:String}, ${3:position})", "(${1:string substring}, ${2:string String}, ${3:numeric position})"],
    "int": ["(${1:number})", "(${1:numeric number})"],
    "invalidateOauthAccesstoken": ["(${1:token}, ${2:type})", "(${1: token}, ${2: type})"],
    "invoke": ["(${1:instance}, ${2:methodname})", "(${1:string instance}, ${2:string methodname}${3:, ${4:any arguments}})"],
    "isArray": ["(${1:value})", "(${1:any value}${2:, ${3:numeric number}})"],
    "isBinary": ["(${1:value})", "(${1:any value})"],
    "isBoolean": ["(${1:value})", "(${1:any value})"],
    "isClosure": ["(${1:object})", "(${1:any object})"],
    "isCustomFunction": ["(${1:Object})", "(${1:any Object})"],
    "isDate": ["(${1:Object})", "(${1:any Object})"],
    "isDDX": ["(${1:path})", "(${1:string path})"],
    "isDebugMode": ["()", "()"],
    "isDefined": ["(${1:variable_name})", "(${1:string variable_name})"],
    "isEmpty": ["(${1:value})", "(${1:any value})"],
    "isFileObject": ["(${1:filePath})", "(${1: filePath})"],
    "isImage": ["(${1:name})", "(${1:string name})"],
    "isImageFile": ["(${1:path})", "(${1:string path})"],
    "isInstanceOf": ["(${1:object}, ${2:typename})", "(${1:any object}, ${2:string typename})"],
    "isIPInRange": ["(${1:ips}, ${2:ip})", "(${1:any ips}, ${2:string ip})"],
    "isIPV6": ["(${1:IP})", "(${1:string IP})"],
    "isJSON": ["(${1:var})", "(${1:string var})"],
    "isK2ServerABroker": ["()", "()"],
    "isK2ServerDocCountExceeded": ["()", "()"],
    "isK2ServerOnline": ["()", "()"],
    "isLeapYear": ["(${1:year})", "(${1:numeric year})"],
    "isLocalhost": ["(${1:ipaddress})", "(${1:string ipaddress})"],
    "isNotMap": ["(${1:obj})", "(${1:any obj})"],
    "isNull": ["(${1:object})", "(${1:variablename object})"],
    "isNumeric": ["(${1:String})", "(${1:string String})"],
    "isNumericDate": ["(${1:number})", "(${1:numeric number})"],
    "isObject": ["(${1:value})", "(${1:any value})"],
    "isPDFArchive": ["(${1:path}, ${2:standard})", "(${1:string path}, ${2:string standard})"],
    "isPDFFile": ["(${1:path})", "(${1:string path})"],
    "isPDFObject": ["(${1:value})", "(${1:variablename value})"],
    "isQuery": ["(${1:value})", "(${1:string value})"],
    "isSafeHTML": ["(${1:inputString})", "(${1:string inputString}${2:, ${3:string PolicyFile}})"],
    "isSimpleValue": ["(${1:value})", "(${1:any value})"],
    "isSOAPRequest": ["()", "()"],
    "isSpreadsheetFile": ["(${1:file})", "(${1:string file})"],
    "isSpreadsheetObject": ["(${1:object})", "(${1:variablename object})"],
    "isStruct": ["(${1:variable})", "(${1:any variable})"],
    "isUserInAnyRole": ["(${1:roleList})", "(${1:string roleList})"],
    "isUserInRole": ["(${1:role_name})", "(${1:string role_name})"],
    "isUserLoggedIn": ["()", "()"],
    "isValid": ["(${1:type}, ${2:value}, ${3:min}, ${4:max}, ${5:pattern})", "(${1:string type}, ${2:any value}, ${3:numeric min}, ${4:numeric max}, ${5:string pattern})"],
    "isValidOauthAccesstoken": ["(${1:token}, ${2:type})", "(${1: token}, ${2: type})"],
    "isVideoFile": ["(${1:path})", "(${1:string path})"],
    "isWDDX": ["(${1:value})", "(${1:any value})"],
    "isXML": ["(${1:value})", "(${1:string value})"],
    "isXMLAttribute": ["(${1:value})", "(${1:any value})"],
    "isXMLDoc": ["(${1:value})", "(${1:any value})"],
    "isXMLElem": ["(${1:value})", "(${1:any value})"],
    "isXMLNode": ["(${1:value})", "(${1:any value})"],
    "isXMLRoot": ["(${1:value})", "(${1:any value})"],
    "isZipFile": ["(${1:path})", "(${1:string path})"],
    "javacast": ["(${1:type}, ${2:variable})", "(${1:string type}, ${2:string variable})"],
    "jsStringFormat": ["(${1:String})", "(${1:string String})"],
    "lCase": ["(${1:String})", "(${1:string String})"],
    "left": ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"],
    "len": ["(${1:Object})", "(${1:any Object})"],
    "listAppend": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"],
    "listAvg": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})"],
    "listChangeDelims": ["(${1:list}, ${2:new_delimiter})", "(${1:string list}, ${2:string new_delimiter}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"],
    "listCompact": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean multiCharacterDelimiter}})"],
    "listContains": ["(${1:list}, ${2:substring})", "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})"],
    "listContainsNoCase": ["(${1:list}, ${2:substring})", "(${1:string list}, ${2:string substring}${3:, ${4:string delimiters}})"],
    "listDeleteAt": ["(${1:list}, ${2:position})", "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}})"],
    "listEach": ["(${1:str}, ${2:function}, ${3:delim})", "(${1: str}, ${2: function}, ${3: delim}${4:, ${5: includeEmptyFields}})"],
    "listEvery": ["(${1:list}, ${2:closure})", "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:numeric maxThreads}})"],
    "listFilter": ["(${1:list}, ${2:function})", "(${1:list list}, ${2:function function})"],
    "listFind": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"],
    "listFindNoCase": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}}${5:, ${6:string includeEmptyValues}})"],
    "listFirst": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"],
    "listGetAt": ["(${1:list}, ${2:position})", "(${1:string list}, ${2:numeric position}${3:, ${4:string delimiters}}${5:, ${6:boolean includeEmptyValues}})"],
    "listIndexExists": ["(${1:list}, ${2:index})", "(${1:string list}, ${2:numeric index}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}})"],
    "listInsertAt": ["(${1:list}, ${2:position}, ${3:value})", "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})"],
    "listItemTrim": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}})"],
    "listLast": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"],
    "listLen": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:string includeEmptyValues}})"],
    "listMap": ["(${1:list}, ${2:function}, ${3:intialValue}, ${4:delimiter}, ${5:includeEmptyFields})", "(${1:string list}, ${2:any function}, ${3:any intialValue}, ${4:string delimiter}, ${5:boolean includeEmptyFields})"],
    "listPrepend": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"],
    "listQualify": ["(${1:list}, ${2:qualifier})", "(${1:string list}, ${2:string qualifier}${3:, ${4:string delimiters}}${5:, ${6:string elements}}${7:, ${8:boolean includeEmptyFields}})"],
    "listReduce": ["(${1:list}, ${2:function}, ${3:intialValue}, ${4:delimiter}, ${5:includeEmptyFields})", "(${1:string list}, ${2:any function}, ${3:any intialValue}, ${4:string delimiter}, ${5:boolean includeEmptyFields})"],
    "listRemoveDuplicates": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiter}}${4:, ${5:boolean ignoreCase}})"],
    "listRest": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"],
    "listSetAt": ["(${1:list}, ${2:position}, ${3:value})", "(${1:string list}, ${2:numeric position}, ${3:string value}${4:, ${5:string delimiters}})"],
    "listSome": ["(${1:list}, ${2:closure})", "(${1:string list}, ${2:function closure}${3:, ${4:string delimiter}}${5:, ${6:boolean includeEmptyFields}}${7:, ${8:boolean multiCharacterDelimiter}}${9:, ${10:boolean parallel}}${11:, ${12:numeric maxThreads}})"],
    "listSort": ["(${1:list}, ${2:sort_type})", "(${1:string list}, ${2:string sort_type}${3:, ${4:string sort_order}}${5:, ${6:string delimiters}})"],
    "listToArray": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}}${4:, ${5:boolean includeEmptyFields}}${6:, ${7:boolean multiCharacterDelimiter}})"],
    "listTrim": ["(${1:list})", "(${1:string list}${2:, ${3:string delimiters}})"],
    "listValueCount": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"],
    "listValueCountNoCase": ["(${1:list}, ${2:value})", "(${1:string list}, ${2:string value}${3:, ${4:string delimiters}})"],
    "lJustify": ["(${1:String}, ${2:length})", "(${1:string String}, ${2:numeric length})"],
    "location": ["(${1:url})", "(${1:string url}${2:, ${3:boolean addtoken}}${4:, ${5:numeric statuscode}})"],
    "log": ["(${1:number})", "(${1:numeric number})"],
    "log10": ["(${1:number})", "(${1:numeric number})"],
    "lsCurrencyFormat": ["(${1:number})", "(${1:numeric number}${2:, ${3:string type}})"],
    "lsDateFormat": ["(${1:date})", "(${1:date date}${2:, ${3:string mask}})"],
    "lsDateTimeFormat": ["(${1:date})", "(${1: date}${2:, ${3: mask}}${4:, ${5: locale}}${6:, ${7: timeZone}})"],
    "lsDayOfWeek": ["(${1:date})", "(${1:date date}${2:, ${3:string locale}}${4:, ${5:string timezone}})"],
    "lsEuroCurrencyFormat": ["(${1:currency}, ${2:type})", "(${1:string currency}, ${2:string type})"],
    "lsIsCurrency": ["(${1:String})", "(${1:string String})"],
    "lsIsDate": ["(${1:String})", "(${1:string String})"],
    "lsIsNumeric": ["(${1:String})", "(${1:string String})"],
    "lsNumberFormat": ["(${1:number})", "(${1:numeric number}${2:, ${3:string mask}})"],
    "lsParseCurrency": ["(${1:String})", "(${1:string String})"],
    "lsParseDateTime": ["(${1:dt_string})", "(${1:string dt_string})"],
    "lsParseEuroCurrency": ["(${1:currency_string})", "(${1:string currency_string})"],
    "lsParseNumber": ["(${1:String})", "(${1:string String})"],
    "lsTimeFormat": ["(${1:time})", "(${1:date time}${2:, ${3:string mask}})"],
    "lsWeek": ["(${1:date})", "(${1:date date}${2:, ${3:string locale}}${4:, ${5:string timezone}})"],
    "lTrim": ["(${1:String})", "(${1:string String})"],
    "manifestRead": ["(${1:path})", "(${1:string path})"],
    "max": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"],
    "metaphone": ["(${1:str})", "(${1:string str})"],
    "mid": ["(${1:String}, ${2:start}, ${3:count})", "(${1:string String}, ${2:numeric start}, ${3:numeric count})"],
    "millisecond": ["(${1:date})", "(${1:date date}${2:, ${3:string timezone}})"],
    "min": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2})"],
    "minute": ["(${1:date})", "(${1:date date})"],
    "month": ["(${1:date})", "(${1:date date})"],
    "monthAsString": ["(${1:month_number})", "(${1:numeric month_number})"],
    "monthShortAsString": ["(${1:monthnumber})", "(${1:numeric monthnumber})"],
    "newLine": ["()", "()"],
    "now": ["()", "()"],
    "nowServer": ["()", "()"],
    "nullValue": ["()", "()"],
    "numberFormat": ["(${1:number})", "(${1:numeric number}${2:, ${3:string mask}})"],
    "objectEquals": ["(${1:Param1}, ${2:Param2})", "(${1: Param1}, ${2: Param2})"],
    "objectLoad": ["(${1:binaryObject}, ${2:filepath})", "(${1:binary binaryObject}, ${2:string filepath})"],
    "objectSave": ["(${1:object})", "(${1:variablename object}${2:, ${3:string file}})"],
    "onApplicationEnd": ["(${1:ApplicationScope})", "(${1:struct ApplicationScope})"],
    "onApplicationStart": ["()", "()"],
    "onError": ["(${1:exception}, ${2:eventName})", "(${1:struct exception}, ${2:string eventName})"],
    "onMissingMethod": ["(${1:missingMethodName}, ${2:missingMethodArguments})", "(${1:string missingMethodName}, ${2:struct missingMethodArguments})"],
    "onMissingTemplate": ["(${1:targetPage})", "(${1:string targetPage})"],
    "onRequest": ["(${1:targetPage})", "(${1:string targetPage})"],
    "onRequestEnd": ["(${1:targetPage})", "(${1:string targetPage})"],
    "onRequestStart": ["(${1:targetPage})", "(${1:string targetPage})"],
    "onServerStart": ["()", "()"],
    "onSessionEnd": ["(${1:sessionScope}, ${2:applicationScope})", "(${1:struct sessionScope}, ${2:struct applicationScope})"],
    "onSessionStart": ["()", "()"],
    "ormClearSession": ["(${1:datasource})", "(${1:string datasource})"],
    "ormCloseAllSessions": ["(${1:region})", "(${1: region})"],
    "ormCloseSession": ["(${1:datasource})", "(${1:string datasource})"],
    "ormEvictCollection": ["(${1:componentName}, ${2:relationName})", "(${1:string componentName}, ${2:string relationName}${3:, ${4:string id}})"],
    "ormEvictEntity": ["(${1:componentName})", "(${1:string componentName}${2:, ${3:string id}})"],
    "ormEvictQueries": ["(${1:cacheName})", "(${1:string cacheName})"],
    "ormExecuteQuery": ["(${1:hql})", "(${1:string hql}${2:, ${3:any params}}${4:, ${5:boolean unique}}${6:, ${7:string queryoptions}})"],
    "ormFlush": ["(${1:datasource})", "(${1:string datasource})"],
    "ormFlushAll": ["(${1:region})", "(${1: region})"],
    "ormGetSession": ["()", "()"],
    "ormGetSessionFactory": ["()", "()"],
    "ormIndex": ["()", "()"],
    "ormIndexPurge": ["(${1:region})", "(${1: region})"],
    "ormReload": ["()", "()"],
    "ormSearch": ["(${1:query_text}, ${2:entityName}, ${3:fields}, ${4:optionMap})", "(${1: query_text}, ${2: entityName}, ${3: fields}, ${4: optionMap})"],
    "ormSearchOffline": ["(${1:query_text}, ${2:entityName}, ${3:fields_to_be_selected}, ${4:fields})", "(${1: query_text}, ${2: entityName}, ${3: fields_to_be_selected}, ${4: fields}${5:, ${6: optionMap}}${7:, ${8: extra options}})"],
    "pagePoolClear": ["()", "()"],
    "pagePoolList": ["()", "()"],
    "paragraphFormat": ["(${1:String})", "(${1:string String})"],
    "parameterExists": ["(${1:region})", "(${1: region})"],
    "parseDateTime": ["(${1:dt_string})", "(${1:string dt_string}${2:, ${3:string pop_conversion}})"],
    "parseNumber": ["(${1:number})", "(${1:string number}${2:, ${3:string radix}})"],
    "pi": ["()", "()"],
    "precisionEvaluate": ["(${1:expressions})", "(${1:string expressions})"],
    "preserveSingleQuotes": ["(${1:variable})", "(${1:string variable})"],
    "quarter": ["(${1:date})", "(${1:date date})"],
    "query": ["()", "()"],
    "queryAddColumn": ["(${1:query}, ${2:column_name}, ${3:array_name})", "(${1:query query}, ${2:string column_name}${3:, ${4:string datatype}}, ${5:array array_name})"],
    "queryAddRow": ["(${1:query})", "(${1:query query}${2:, ${3:numeric / array / struct number/row(s)}})"],
    "queryColumnArray": ["(${1:query})", "(${1:query query})"],
    "queryColumnCount": ["(${1:query})", "(${1:query query})"],
    "queryColumnData": ["(${1:query}, ${2:columnName})", "(${1:query query}, ${2:string columnName}${3:, ${4:function closure}})"],
    "queryColumnExists": ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"],
    "queryColumnList": ["(${1:query})", "(${1:query query}${2:, ${3:string delimiter}})"],
    "queryConvertForGrid": ["(${1:query}, ${2:page}, ${3:pageSize})", "(${1:string query}, ${2:numeric page}, ${3:numeric pageSize})"],
    "queryCurrentRow": ["(${1:query})", "(${1:query query})"],
    "queryDeleteColumn": ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"],
    "queryDeleteRow": ["(${1:query})", "(${1:query query}${2:, ${3:numeric row}})"],
    "queryEach": ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "queryEvery": ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "queryExecute": ["(${1:sql}, ${2:params}, ${3:options})", "(${1:string sql}, ${2:any params}, ${3:struct options})"],
    "queryFilter": ["(${1:query}, ${2:filter})", "(${1:query query}, ${2:function filter}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "queryGetCell": ["(${1:query}, ${2:column_name})", "(${1:query query}, ${2:string column_name}${3:, ${4:numeric row_number}})"],
    "queryGetResult": ["(${1:query})", "(${1:query query})"],
    "queryGetRow": ["(${1:query}, ${2:rowNumber})", "(${1: query}, ${2: rowNumber})"],
    "queryKeyExists": ["(${1:query}, ${2:key})", "(${1:query query}, ${2:string key})"],
    "queryMap": ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "queryNew": ["(${1:columnList})", "(${1:string columnList}${2:, ${3:string columnTypeList}}${4:, ${5:any rowData}})"],
    "queryRecordCount": ["(${1:query})", "(${1:query query})"],
    "queryReduce": ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:any initialValue}})"],
    "queryRowData": ["(${1:query}, ${2:rowNumber})", "(${1:query query}, ${2:numeric rowNumber})"],
    "querySetCell": ["(${1:query}, ${2:column}, ${3:value})", "(${1:query query}, ${2:string column}, ${3:any value}${4:, ${5:numeric row}})"],
    "querySlice": ["(${1:query}, ${2:offset})", "(${1:query query}, ${2:numeric offset}${3:, ${4:numeric length}})"],
    "querySome": ["(${1:query}, ${2:closure})", "(${1:query query}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "querySort": ["(${1:query}, ${2:sortFunction})", "(${1:query query}, ${2:function sortFunction}${3:, ${4:string direction}})"],
    "quotedValueList": ["(${1:column})", "(${1:querycolumn column}${2:, ${3:string delimiter}})"],
    "rand": ["(${1:algorithm})", "(${1:string algorithm})"],
    "randomize": ["(${1:number})", "(${1:numeric number}${2:, ${3:string algorithm}})"],
    "randRange": ["(${1:number1}, ${2:number2})", "(${1:numeric number1}, ${2:numeric number2}${3:, ${4:string algorithm}})"],
    "reEscape": ["(${1:string})", "(${1: string})"],
    "reFind": ["(${1:reg_expression}, ${2:string})", "(${1:regex reg_expression}, ${2:string string}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}}${7:, ${8:string scope}})"],
    "reFindNoCase": ["(${1:reg_expression}, ${2:string})", "(${1:regex reg_expression}, ${2:string string}${3:, ${4:numeric start}}${5:, ${6:boolean returnsubexpressions}}${7:, ${8:string scope}})"],
    "releaseCOMObject": ["(${1:objectName})", "(${1:any objectName})"],
    "reMatch": ["(${1:reg_expression}, ${2:string})", "(${1:string reg_expression}, ${2:string string})"],
    "reMatchNoCase": ["(${1:reg_expression}, ${2:string})", "(${1:string reg_expression}, ${2:string string})"],
    "removeCachedQuery": ["(${1:SQL}, ${2:datasource})", "(${1: SQL}, ${2: datasource}${3:, ${4: params}}${5:, ${6: region}})"],
    "removeChars": ["(${1:String}, ${2:start}, ${3:count})", "(${1:string String}, ${2:numeric start}, ${3:numeric count})"],
    "render": ["(${1:CFML})", "(${1:string CFML}${2:, ${3:string dialect}})"],
    "repeatString": ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"],
    "replace": ["(${1:String}, ${2:substring1}, ${3:substring2})", "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})"],
    "replaceList": ["(${1:String}, ${2:list1}, ${3:list2})", "(${1:string String}, ${2:string list1}, ${3:string list2}${4:, ${5:string delimiter}}${6:, ${7:string delimiterList1}}${8:, ${9:string delimiterList2}}${10:, ${11:boolean includeEmptyFields}})"],
    "replaceListNoCase": ["(${1:String}, ${2:list1}, ${3:list2})", "(${1:string String}, ${2:string list1}, ${3:string list2}${4:, ${5:string delimiter}}${6:, ${7:string delimiterList1}}${8:, ${9:string delimiterList2}}${10:, ${11:boolean includeEmptyFields}})"],
    "replaceNoCase": ["(${1:String}, ${2:substring1}, ${3:substring2})", "(${1:string String}, ${2:string substring1}, ${3:string substring2}${4:, ${5:string scope}})"],
    "reReplace": ["(${1:string}, ${2:regex}, ${3:substring})", "(${1:string string}, ${2:regex regex}, ${3:string substring}${4:, ${5:string scope}})"],
    "reReplaceNoCase": ["(${1:String}, ${2:reg_expression}, ${3:substring})", "(${1:string String}, ${2:regex reg_expression}, ${3:string substring}${4:, ${5:string scope}})"],
    "restDeleteApplication": ["(${1:dirPath})", "(${1: dirPath})"],
    "restInitApplication": ["(${1:dirPath}, ${2:serviceMapping}, ${3:password})", "(${1:string dirPath}, ${2:string serviceMapping}${3:, ${4:string default}}, ${5:string password})"],
    "restSetResponse": ["(${1:response})", "(${1: response})"],
    "reverse": ["(${1:String})", "(${1:string String})"],
    "right": ["(${1:String}, ${2:count})", "(${1:string String}, ${2:numeric count})"],
    "rJustify": ["(${1:String}, ${2:length})", "(${1:string String}, ${2:numeric length})"],
    "round": ["(${1:number})", "(${1:numeric number})"],
    "rTrim": ["(${1:String})", "(${1:string String})"],
    "runAsync": ["(${1:callback})", "(${1:function callback}${2:, ${3:numeric timeout}})"],
    "second": ["(${1:date})", "(${1:date date})"],
    "sendGatewayMessage": ["(${1:gatewayID}, ${2:data})", "(${1:string gatewayID}, ${2:struct data})"],
    "serialize": ["(${1:objToBeSerialized}, ${2:type}, ${3:useCustomSerializer})", "(${1:any objToBeSerialized}, ${2:string type}, ${3:boolean useCustomSerializer})"],
    "serializeJSON": ["(${1:var})", "(${1:variablename var}${2:, ${3:boolean serializeQueryByColumns}}${4:, ${5:boolean useSecureJSONPrefix}}${6:, ${7:boolean useCustomSerializer}})"],
    "serializeXML": ["(${1:objToBeSerialized}, ${2:useCustomSerializer})", "(${1: objToBeSerialized}, ${2: useCustomSerializer})"],
    "sessionGetMetadata": ["(${1:region})", "(${1: region})"],
    "sessionInvalidate": ["()", "()"],
    "sessionRotate": ["()", "()"],
    "sessionstartTime": ["()", "()"],
    "setEncoding": ["(${1:scope_name}, ${2:charset})", "(${1:string scope_name}, ${2:string charset})"],
    "setLocale": ["(${1:new_locale})", "(${1:string new_locale})"],
    "setProfileString": ["(${1:inipath}, ${2:section}, ${3:entry}, ${4:value})", "(${1:string inipath}, ${2:string section}, ${3:string entry}, ${4:string value})"],
    "setTimezone": ["(${1:timezone})", "(${1:string timezone})"],
    "setVariable": ["(${1:name}, ${2:value})", "(${1:string name}, ${2:string value})"],
    "sgn": ["(${1:number})", "(${1:numeric number})"],
    "sin": ["(${1:number})", "(${1:numeric number})"],
    "sizeOf": ["(${1:obj})", "(${1:any obj}${2:, ${3:boolean complex}})"],
    "sleep": ["(${1:duration})", "(${1: duration})"],
    "soundEx": ["(${1:str})", "(${1:string str})"],
    "spanExcluding": ["(${1:String}, ${2:set})", "(${1:string String}, ${2:string set})"],
    "spanIncluding": ["(${1:String}, ${2:set})", "(${1:string String}, ${2:string set})"],
    "spreadsheetAddAutoFilter": ["(${1:spreadsheetObj}, ${2:autofilter})", "(${1:any spreadsheetObj}, ${2:string autofilter})"],
    "spreadsheetAddColumn": ["(${1:spreadsheetObj}, ${2:data}, ${3:startrow}, ${4:startcolumn}, ${5:insert})", "(${1:variablename spreadsheetObj}, ${2:string data}, ${3:numeric startrow}, ${4:numeric startcolumn}, ${5:boolean insert}${6:, ${7:boolean insert}})"],
    "spreadsheetAddFreezePane": ["(${1:spreadsheetObj}, ${2:freezeColumn}, ${3:freezeRow})", "(${1:variablename spreadsheetObj}, ${2:numeric freezeColumn}, ${3:numeric freezeRow}${4:, ${5:numeric hideColumn}}${6:, ${7:numeric hideRow}})"],
    "spreadsheetAddimage": ["(${1:spreadsheetObj}, ${2:imagefilepath}, ${3:anchor})", "(${1:variablename spreadsheetObj}, ${2:string imagefilepath}, ${3:string anchor})"],
    "spreadsheetAddInfo": ["(${1:spreadsheetObj}, ${2:info})", "(${1:variablename spreadsheetObj}, ${2:struct info})"],
    "spreadsheetAddPagebreaks": ["(${1:SpreadsheetObj}, ${2:rowbreaks}, ${3:colbreaks})", "(${1:any SpreadsheetObj}, ${2:string rowbreaks}, ${3:string colbreaks})"],
    "spreadsheetAddRow": ["(${1:spreadsheetObj}, ${2:data})", "(${1:variablename spreadsheetObj}, ${2:string data}${3:, ${4:numeric row}}${5:, ${6:numeric column}}${7:, ${8:boolean insert}}${9:, ${10:array datatype}})"],
    "spreadsheetAddRows": ["(${1:spreadsheetObj}, ${2:data})", "(${1:variablename spreadsheetObj}, ${2:any data}${3:, ${4:numeric row}}${5:, ${6:numeric column}}${7:, ${8:boolean insert}}${9:, ${10:array datatype}}${11:, ${12:boolean includeColumnNames}})"],
    "spreadsheetAddSplitPane": ["(${1:spreadsheetObj}, ${2:x}, ${3:y}, ${4:splitColumn}, ${5:splitRow})", "(${1:variablename spreadsheetObj}, ${2:numeric x}, ${3:numeric y}, ${4:numeric splitColumn}, ${5:numeric splitRow}${6:, ${7:string position}})"],
    "spreadsheetCreateSheet": ["(${1:spreadsheetObj}, ${2:name})", "(${1:variablename spreadsheetObj}, ${2:string name})"],
    "spreadsheetDeleteColumn": ["(${1:spreadsheetObj}, ${2:column})", "(${1:variablename spreadsheetObj}, ${2:numeric column})"],
    "spreadsheetDeleteColumns": ["(${1:spreadsheetObj}, ${2:range})", "(${1:variablename spreadsheetObj}, ${2:numeric range})"],
    "spreadsheetDeleteRow": ["(${1:spreadsheetObj}, ${2:row})", "(${1:variablename spreadsheetObj}, ${2:numeric row})"],
    "spreadsheetDeleteRows": ["(${1:spreadsheetObj}, ${2:range})", "(${1:variablename spreadsheetObj}, ${2:numeric range})"],
    "spreadsheetFormatCell": ["(${1:spreadsheetObj}, ${2:format}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:any format}, ${3:numeric row}, ${4:numeric column})"],
    "spreadsheetFormatCellRange": ["(${1:spreadsheetObj}, ${2:format}, ${3:startRow}, ${4:startColumn}, ${5:endRow}, ${6:endColumn})", "(${1: spreadsheetObj}, ${2: format}, ${3: startRow}, ${4: startColumn}, ${5: endRow}, ${6: endColumn})"],
    "spreadsheetFormatColumn": ["(${1:spreadsheetObj}, ${2:format}, ${3:column})", "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric column})"],
    "spreadsheetFormatColumns": ["(${1:spreadsheetObj}, ${2:format}, ${3:columns})", "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:string columns})"],
    "spreadsheetFormatRow": ["(${1:spreadsheetObj}, ${2:format}, ${3:row})", "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric row})"],
    "spreadsheetFormatRows": ["(${1:spreadsheetObj}, ${2:format}, ${3:row})", "(${1:variablename spreadsheetObj}, ${2:string format}, ${3:numeric row})"],
    "spreadsheetGetCellComment": ["(${1:author})", "(${1:string author}${2:, ${3:numeric column}}${4:, ${5:string comment}}${6:, ${7:string row}})"],
    "spreadsheetGetCellFormula": ["(${1:spreadsheetObj}, ${2:row}, ${3:column})", "(${1:variablename spreadsheetObj}, ${2:numeric row}, ${3:numeric column})"],
    "spreadsheetGetCellValue": ["(${1:spreadsheetObj}, ${2:row}, ${3:column})", "(${1:variablename spreadsheetObj}, ${2:string row}, ${3:string column})"],
    "spreadsheetGetColumnCount": ["(${1:spreadsheetObj})", "(${1:any spreadsheetObj}${2:, ${3:string sheet}})"],
    "spreadsheetInfo": ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj})"],
    "spreadsheetMergeCells": ["(${1:spreadsheetObj}, ${2:startrow}, ${3:endrow}, ${4:startcolumn}, ${5:endcolumn})", "(${1:variablename spreadsheetObj}, ${2:numeric startrow}, ${3:numeric endrow}, ${4:numeric startcolumn}, ${5:numeric endcolumn})"],
    "spreadsheetNew": ["(${1:sheetname})", "(${1:string sheetname}${2:, ${3:boolean xmlFormat}})"],
    "spreadsheetRead": ["(${1:fileName}, ${2:spreadsheetObj})", "(${1:string fileName}, ${2:variablename spreadsheetObj})"],
    "spreadsheetReadBinary": ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj})"],
    "spreadsheetRemoveSheet": ["(${1:spreadsheetObj}, ${2:sheetname})", "(${1: spreadsheetObj}, ${2: sheetname})"],
    "spreadsheetSetActiveSheet": ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj}${2:, ${3:string name}})"],
    "spreadsheetSetActiveSheetNumber": ["(${1:spreadsheetObj})", "(${1:variablename spreadsheetObj}${2:, ${3:numeric number}})"],
    "spreadsheetSetCellComment": ["(${1:spreadsheetObj}, ${2:comment}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string comment}, ${3:numeric row}, ${4:numeric column})"],
    "spreadsheetSetCellFormula": ["(${1:spreadsheetObj}, ${2:formula}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string formula}, ${3:numeric row}, ${4:numeric column})"],
    "spreadsheetSetCellValue": ["(${1:spreadsheetObj}, ${2:value}, ${3:row}, ${4:column})", "(${1:variablename spreadsheetObj}, ${2:string value}, ${3:numeric row}, ${4:numeric column})"],
    "spreadsheetSetColumnWidth": ["(${1:spreadsheetObj}, ${2:columnNumber}, ${3:width})", "(${1:variablename spreadsheetObj}, ${2:numeric columnNumber}, ${3:numeric width})"],
    "spreadsheetSetFooter": ["(${1:spreadsheetObj}, ${2:leftFooter}, ${3:centerFooter}, ${4:rightFooter})", "(${1:variablename spreadsheetObj}, ${2:string leftFooter}, ${3:string centerFooter}, ${4:string rightFooter})"],
    "spreadsheetSetHeader": ["(${1:spreadsheetObj}, ${2:leftHeader}, ${3:centerHeader}, ${4:rightHeader})", "(${1:variablename spreadsheetObj}, ${2:string leftHeader}, ${3:string centerHeader}, ${4:string rightHeader})"],
    "spreadsheetSetRowHeight": ["(${1:spreadsheetObj}, ${2:rowNumber}, ${3:height})", "(${1:variablename spreadsheetObj}, ${2:numeric rowNumber}, ${3:numeric height})"],
    "spreadsheetShiftColumns": ["(${1:spreadsheetObj}, ${2:start})", "(${1:variablename spreadsheetObj}, ${2:numeric start}${3:, ${4:numeric end}}${5:, ${6:numeric start}})"],
    "spreadsheetShiftRows": ["(${1:spreadsheetObj}, ${2:start}, ${3:end})", "(${1:variablename spreadsheetObj}, ${2:numeric start}, ${3:numeric end}${4:, ${5:numeric rows}})"],
    "spreadsheetwrite": ["(${1:spreadsheetObj}, ${2:fileName})", "(${1:variablename spreadsheetObj}, ${2:string fileName}${3:, ${4:string password}}${5:, ${6:boolean overwrite}})"],
    "sqr": ["(${1:number})", "(${1:numeric number})"],
    "sslCertificateInstall": ["(${1:host})", "(${1:string host}${2:, ${3:numeric port}})"],
    "sslCertificateList": ["(${1:host})", "(${1:string host}${2:, ${3:numeric port}})"],
    "storeAddACL": ["(${1:url}, ${2:ACLObject})", "(${1: url}, ${2: ACLObject})"],
    "storeGetACL": ["(${1:ulr}, ${2:ACLObject})", "(${1: ulr}, ${2: ACLObject})"],
    "storeGetMetadata": ["(${1:url})", "(${1: url})"],
    "storeSetACL": ["(${1:url}, ${2:ACLObject})", "(${1: url}, ${2: ACLObject})"],
    "storeSetMetadata": ["(${1:url}, ${2:region})", "(${1: url}, ${2: region})"],
    "stringLen": ["(${1:string})", "(${1:string string})"],
    "stripCR": ["(${1:String})", "(${1:string String})"],
    "structAppend": ["(${1:destStruct}, ${2:sourceStruct})", "(${1:struct destStruct}, ${2:struct sourceStruct}${3:, ${4:boolean overwriteFlag}})"],
    "structClear": ["(${1:structure})", "(${1:struct structure})"],
    "structCopy": ["(${1:structure})", "(${1:struct structure})"],
    "structCount": ["(${1:structure})", "(${1:struct structure})"],
    "structDelete": ["(${1:structure}, ${2:key})", "(${1:string structure}, ${2:string key}${3:, ${4:boolean indicateNotExisting}})"],
    "structEach": ["(${1:structure}, ${2:callback})", "(${1:string structure}, ${2:function callback})"],
    "structEvery": ["(${1:struct}, ${2:closure})", "(${1:struct struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "structFilter": ["(${1:structure}, ${2:function})", "(${1:struct structure}, ${2:function function})"],
    "structFind": ["(${1:structure}, ${2:key})", "(${1:struct structure}, ${2:string key}${3:, ${4:any defaultValue}})"],
    "structFindKey": ["(${1:top}, ${2:value}, ${3:scope})", "(${1:any top}, ${2:string value}, ${3:string scope})"],
    "structFindValue": ["(${1:top}, ${2:value})", "(${1:any top}, ${2:string value}${3:, ${4:string scope}})"],
    "structGet": ["(${1:path})", "(${1:string path})"],
    "structInsert": ["(${1:structure}, ${2:key}, ${3:value})", "(${1:struct structure}, ${2:string key}, ${3:any value}${4:, ${5:boolean allowoverwrite}})"],
    "structIsEmpty": ["(${1:structure})", "(${1:struct structure})"],
    "structIsOrdered": ["(${1:struct})", "(${1:struct struct})"],
    "structKeyArray": ["(${1:structure})", "(${1:struct structure})"],
    "structKeyExists": ["(${1:structure}, ${2:key})", "(${1:struct structure}, ${2:string key})"],
    "structKeyList": ["(${1:structure})", "(${1:struct structure}${2:, ${3:string delimiter}})"],
    "structKeyTranslate": ["(${1:structure})", "(${1:struct structure}${2:, ${3:boolean deepTranslation}}${4:, ${5:boolean leaveOriginalKey}})"],
    "structMap": ["(${1:struct}, ${2:function})", "(${1:struct struct}, ${2:any function})"],
    "structNew": ["(${1:structType})", "(${1:string structType})"],
    "structReduce": ["(${1:struct}, ${2:function}, ${3:initialVal})", "(${1:struct struct}, ${2:any function}, ${3:any initialVal})"],
    "structSetMetadata": ["(${1:inputStruct}, ${2:metaStruct})", "(${1:struct inputStruct}, ${2:struct metaStruct})"],
    "structSome": ["(${1:struct}, ${2:closure})", "(${1:struct struct}, ${2:function closure}${3:, ${4:boolean parallel}}${5:, ${6:numeric maxThreads}})"],
    "structSort": ["(${1:base})", "(${1:struct base}${2:, ${3:string sorttype}}${4:, ${5:string sortorder}}${6:, ${7:string pathtosubelement}}${8:, ${9:boolean localeSensitive}}${10:, ${11:function callback}})"],
    "structToSorted": ["(${1:structure})", "(${1:struct structure}${2:, ${3:function callback}}${4:, ${5:string sorttype}}${6:, ${7:string sortorder}}${8:, ${9:boolean localeSensitive}})"],
    "structUpdate": ["(${1:structure}, ${2:key}, ${3:value})", "(${1:struct structure}, ${2:string key}, ${3:any value})"],
    "systemCacheClear": ["(${1:cacheName})", "(${1:string cacheName})"],
    "systemOutput": ["(${1:obj})", "(${1:any obj}${2:, ${3:boolean addNewLine}}${4:, ${5:boolean doErrorStream}})"],
    "tan": ["(${1:number})", "(${1:numeric number})"],
    "threadJoin": ["(${1:threadName})", "(${1:string threadName}${2:, ${3:numeric timeout}})"],
    "threadTerminate": ["(${1:threadname})", "(${1:string threadname})"],
    "throw": ["(${1:message})", "(${1:string message}${2:, ${3:string type}}${4:, ${5:string detail}}${6:, ${7:string errorcode}}${8:, ${9:string extendedinfo}}${10:, ${11:any object}})"],
    "timeFormat": ["(${1:time})", "(${1:date time}${2:, ${3:string mask}})"],
    "toBase64": ["(${1:string_or_object})", "(${1:any string_or_object}${2:, ${3:string encoding}})"],
    "toBinary": ["(${1:base64_or_object})", "(${1:any base64_or_object})"],
    "toNumeric": ["(${1:value})", "(${1:any value}${2:, ${3:any radix}})"],
    "toScript": ["(${1:cfvar}, ${2:javascriptvar})", "(${1:any cfvar}, ${2:string javascriptvar}${3:, ${4:boolean outputformat}}${5:, ${6:boolean asformat}})"],
    "toString": ["(${1:any_value})", "(${1:any any_value}${2:, ${3:string encoding}})"],
    "trace": ["(${1:var})", "(${1:string var}${2:, ${3:string text}}${4:, ${5:string type}}${6:, ${7:string category}}${8:, ${9:boolean inline}}${10:, ${11:boolean abort}})"],
    "transactionCommit": ["()", "()"],
    "transactionRollback": ["(${1:savepoint})", "(${1:string savepoint})"],
    "transactionSetSavepoint": ["(${1:savepoint})", "(${1:string savepoint})"],
    "trim": ["(${1:String})", "(${1:string String})"],
    "trueFalseFormat": ["(${1:value})", "(${1:boolean value})"],
    "uCase": ["(${1:String})", "(${1:string String})"],
    "ucFirst": ["(${1:string})", "(${1:string string}${2:, ${3:boolean doAll}}${4:, ${5:boolean doLowerIfAllUppercase}})"],
    "unserializeJava": ["(${1:string})", "(${1:string string})"],
    "urlDecode": ["(${1:urlencodedstring})", "(${1:string urlencodedstring}${2:, ${3:string charset}})"],
    "urlEncode": ["(${1:string})", "(${1:string string}${2:, ${3:string charset}}${4:, ${5:boolean force}})"],
    "urlEncodedFormat": ["(${1:String})", "(${1:string String}${2:, ${3:string charset}})"],
    "urlSessionFormat": ["(${1:requesturl})", "(${1:url requesturl})"],
    "val": ["(${1:String})", "(${1:string String})"],
    "valueArray": ["(${1:query}, ${2:column})", "(${1:query query}, ${2:string column})"],
    "valueList": ["(${1:column})", "(${1:querycolumn column}${2:, ${3:string delimiter}})"],
    "verifyClient": ["()", "()"],
    "webserviceNew": ["(${1:url})", "(${1:string url}${2:, ${3:struct arguments}})"],
    "week": ["(${1:date})", "(${1:date date})"],
    "wrap": ["(${1:String}, ${2:limit})", "(${1:string String}, ${2:numeric limit}${3:, ${4:boolean strip}})"],
    "writeBody": ["()", "()"],
    "writeDump": ["(${1:var})", "(${1:variablename var}${2:, ${3:boolean expand}}${4:, ${5:string format}}${6:, ${7:boolean abort}}${8:, ${9:string hide}}${10:, ${11:numeric keys}}${12:, ${13:string label}}${14:, ${15:boolean metainfo}}${16:, ${17:string output}}${18:, ${19:string show}}${20:, ${21:boolean showUDfs}}${22:, ${23:numeric top}})"],
    "writeLog": ["(${1:text})", "(${1:string text}${2:, ${3:string type}}${4:, ${5:boolean application}}${6:, ${7:string file}}${8:, ${9:string log}})"],
    "writeOutput": ["(${1:string})", "(${1:string string}${2:, ${3:string encodeFor}})"],
    "wsGetAllChannels": ["(${1:channelName})", "(${1: channelName})"],
    "wsGetSubscribers": ["(${1:channel})", "(${1: channel})"],
    "wsPublish": ["(${1:channel}, ${2:message})", "(${1: channel}, ${2: message}${3:, ${4: filterCriteria}})"],
    "wsSendMessage": ["(${1:message})", "(${1: message})"],
    "xmlChildPos": ["(${1:elem}, ${2:childname}, ${3:n})", "(${1:xml elem}, ${2:string childname}, ${3:numeric n})"],
    "xmlElemNew": ["(${1:xmlobj}, ${2:childname})", "(${1:xml xmlobj}${2:, ${3:string namespace}}, ${4:string childname})"],
    "xmlFormat": ["(${1:String})", "(${1:string String}${2:, ${3:boolean escapeChars}})"],
    "xmlGetNodeType": ["(${1:xmlNode})", "(${1:xml xmlNode})"],
    "xmlNew": ["(${1:casesensitive})", "(${1:boolean casesensitive})"],
    "xmlParse": ["(${1:xmlString})", "(${1:string xmlString}${2:, ${3:boolean caseSensitive}}${4:, ${5:string validator}})"],
    "xmlSearch": ["(${1:xmldoc}, ${2:xpathstring})", "(${1:xml xmldoc}, ${2:string xpathstring})"],
    "xmlTransform": ["(${1:xml}, ${2:xsl})", "(${1:xml xml}, ${2:string xsl}${3:, ${4:struct parameters}})"],
    "xmlValidate": ["(${1:xmlDoc})", "(${1:any xmlDoc}${2:, ${3:string validator}})"],
    "year": ["(${1:date})", "(${1:date date})"],
    "yesNoFormat": ["(${1:value})", "(${1:any value})"]
}
